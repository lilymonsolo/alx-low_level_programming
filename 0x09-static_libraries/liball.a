!<arch>
0-isupper.c/    0           0     0     644     173       `
#include "main.h"

/**
*_isupper - check the alpha isupper.
*@c: letter
*Return: 1 or 0.
*/

int _isupper(int c)

{
if (c >= 'A' && c <= 'Z')
return (1);
else
return (0);
}

0-memset.c/     0           0     0     644     255       `
#include "main.h"

/**
* _memset - function that fills memory with a constant byte.
*@b: valor a establecer
*@n: # bytes q establece el vr.
*@s: puntero al bloque de memoria que va a llenar
*Return: 0
*/

char *_memset(char *s, char b, unsigned int n)
{}

0-strcat.c/     0           0     0     644     311       `
#include "main.h"
#include <stdio.h>
/**
* _strcat - function that concatenates two strings.
*
* @dest: destino
* @src: source
*
* Return: 0.
*/
char *_strcat(char *dest, char *src)
{
	int a;
	for (a = 0; dest[a] != '\0'; a++)
	{}
	while (*(src))
	{
		*(dest + a) = *(src);
		a++;
		src++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     97        `
#include "main.h"

/**
* _atoi - function
* @s: its a ptr
* Return: 0.
*/

int _atoi(char *s)
{}

1-isdigit.c/    0           0     0     644     173       `
#include "main.h"

/**
*_isdigit - check the alpha isupper.
*@c: letter
*Return: 1 or 0.
*/

int _isdigit(int c)

{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     396       `
#include "main.h"

/**
* _memcpy - function that copies memory area.
*@n: número de bytes que se copiarán.
*@dest: matriz destino
*@src: es un puntero al origen de los datos que se copiarán
* Return: 0.
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	int a;
	unsigned int i;

	for (a = 0; src[a] != '\0' ; a++)

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     360       `
#include "main.h"

/**
* _strncat - function that concatenates two strings.
*
* @dest: destino
* @src: source
* @n: espacio requerido
* Return: 0.
*/

char *_strncat(char *dest, char *src, int n)
{
	int a;
	int b;

	for (a = 0; dest[a] != '\0'; a++)
	{}

	for (b = 0; b < n && src[b] != '\0';)
	{
		*(dest + a) = *(src + b);
		a++;
		b++;
	}
	return (dest);
}
2-strchr.c/     0           0     0     644     345       `
#include "main.h"

/**
* _strchr - function that locates a character in a string.
*@c: caracter a buscar en la matriz.
*:
*@s: cadena que va a escanear
* Return: 0.
*/

char *_strchr(char *s, char c)
{
	int a;

	for (a = 0; s[a] != '\0' ; a++)
	{
		if (s[a] == c)

			return (s + a);
	}
	if (s[a] == c)
	{
		return (s + a);
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     192       `
#include "main.h"

/**
* _strlen- Returns the length of a string.
*
* @s: lenght
* Return: int.
*/

int _strlen(char *s)
{
	int str;

	for (str = 0; s[str] != '\0'; str++)
	;
	return (str);
}
2-strncpy.c/    0           0     0     644     337       `
#include "main.h"

/**
* _strncpy - function that copies a string.
*
* @dest: destino
* @src: source
* @n: espacio requerido
* Return: 0.
*/

char *_strncpy(char *dest, char *src, int n)
{
	int a;

	for (a = 0; a < n && src[a] != '\0'; a++)
	{
		*(dest + a) = src[a];
	}

	for (; a < n;)
	{
		dest[a] = '\0';
		a++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     221       `
#include "main.h"
/**
*_islower - These functions check whether
*@c: character one lettre
*Return: 1 if int c is lowercase, 0 if otherwise
*/
int _islower(int c)
{
if (c >= 'a' && c <= 'z')
return (1);
else
return (0);
}

3-puts.c/       0           0     0     644     230       `
#include "main.h"

/**
* _puts - Write a function that prints a string
*
* @str: its a ptr
* Return: 0.
*/

void _puts(char *str)
{
	int a;

	a = 0;

	for (a = 0; str[a] != '\0'; a++)
	{
		_putchar(str[a]);
	}
		_putchar('\n');
}
3-strcmp.c/     0           0     0     644     328       `
#include "main.h"

/**
* _strcmp - function that compares two strings.
*@s1: str 1
*@s2: str 2
* Return: 0.
*/

int _strcmp(char *s1, char *s2)
{
	int a;

	for (a = 0; s1[a] != '\0' && s2[a] != '\0'; a++)
	{
		if (s1[a] < s2[a])
			return (s1[a] - s2[a]);

		else if (s1[a] > s2[a])
			return (s1[a] - s2[a]);
	}
	return (0);
}
3-strspn.c/     0           0     0     644     133       `
#include "main.h"

/**
* _strspn - function
* @s: arg
* @accept: arg
* Return: 0.
*/

unsigned int _strspn(char *s, char *accept)
{}

4-isalpha.c/    0           0     0     644     247       `
#include "main.h"
/**
*_isalpha - checks for alphabetic .
*@c: character
*Return: 1 if c is a letter, lowercase or upper, 0 if otherwise
*/
int _isalpha(int c)
{
if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
return (1);
else
return (0);
}

4-strpbrk.c/    0           0     0     644     129       `
#include "main.h"

/**
* _strpbrk - function
* @s: arg
* @accept: arg
* Return: ptr
*/

char *_strpbrk(char *s, char *accept)
{}

5-strstr.c/     0           0     0     644     140       `
#include "main.h"

/**
* _strstr - function
* @haystack: arg
* @needle: arg
* Return: 0.
*/

char *_strstr(char *haystack, char *needle)
{}
6-abs.c/        0           0     0     644     245       `
#include "main.h"

/**
 *_abs - Check code
 * @r: An integre input
 * Description: This function returns absolute value of a number
 * Return: Absolut value of number r
 */
int _abs(int r)
{
	if (r >= 0)
		return (r);
	else
		return (r * -1);
}

9-strcpy.c/     0           0     0     644     348       `
#include "main.h"
#include <stdio.h>

/**
* _strcpy -  function that copies the string pointed
*
* @dest: array
* @src: Text array
*
* Return: 0.
*/

char *_strcpy(char *dest, char *src)
{
	int a;
	int b;
	char c;

	for (a = 0; src[a] != '\0'; a++)
	{}
	for (b = 0; b < a; b++)
	{
		c = src[b];
		dest[b] = c;
	}
	dest[b] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

